#!/usr/bin/env ruby
require 'csv'
require 'rsruby'

usage =<<EOF
      #{$0} panda.csv prepared_panda.csv
EOF

if ARGV.length != 2
  puts usage
  exit
end

# functions
####################################################
R = RSRuby.instance()
R.eval_R("scaleData <- function(x) {
  k = (x-min(x))/(max(x)-min(x))*100
  k/100 * 90 + 5
}")

#k/100 * 90 + 5

R.eval_R("avgData <- function(d) {
  dd <- filter(d,rep(0.33,3))
  dd[1] <- d[1]
  dd[length(dd)] <- d[length(d)]
  dd
}")
####################################################

out = File.new(ARGV[1],"w")

CSV.foreach(ARGV[0],  {:headers => :first_row}) do |row|
  numbers = []
  time_points = []
  number_a = []
  number_b = []
  number_c = []
  number_max = []
  number_min = []

  %w{8 12 16 20 24 28 }.each do |i|
    number = (row["dc_ct#{i}_rep_a"].to_f + row["dc_ct#{i}_rep_b"].to_f +
      row["dc_ct#{i}_rep_c"].to_f) / 3
    numbers << number
    number_a << row["dc_ct#{i}_rep_a"].to_f
    number_b << row["dc_ct#{i}_rep_b"].to_f
    number_c << row["dc_ct#{i}_rep_c"].to_f
    number_max << R.max(row["dc_ct#{i}_rep_a"].to_f, row["dc_ct#{i}_rep_b"].to_f,row["dc_ct#{i}_rep_c"].to_f  )
    number_min << R.min(row["dc_ct#{i}_rep_a"].to_f, row["dc_ct#{i}_rep_b"].to_f,row["dc_ct#{i}_rep_c"].to_f  )
    time_points << i
  end
  all = [number_a, number_b, number_c].flatten
  max = R.max(all).to_i
  min = R.min(all).to_i
  mid = R.mean(all).to_i

  scaled_all = R.scaleData([numbers,number_max,number_min].flatten).map {|e| e.to_i }
  scaled = scaled_all[0..5]
  scaled_max = scaled_all[6..11]
  scaled_min = scaled_all[12..17]
  #cubase = "http://chart.apis.google.com/chart?chs=%sx%s&cht=lc&chxt=x,y&chxl=0:|8||||||12||||||16||||||20||||||24||||||28|1:|#{min}|#{mid}|#{max}|&chxp=1,2,50,97&chxr=0,18,66&chls=0,0,0|0,0,0|2,1,0|0,0,0&chf=c,ls,0,CCCCCC,0.125,FFFFFF,0.25,CCCCCC,0.25,FFFFFF,0.25,CCCCCC,0.125&chd=t:#{scaled_min.join(",")}|#{scaled_max.join(",")}|#{scaled.join(",")}&chco=3164A6,FDB33A&chm=a,555555,0,-1,5|o,555555,2,-1,5|o,555555,3,-1,5|E,111111,0,-1,1:20|E,111111,0,1,1:20|E,111111,0,2,1:20|E,111111,0,3,1:20|E,111111,0,4,1:20|E,111111,0,5,1:20"
  cubase = "http://chart.apis.google.com/chart?chs=%sx%s&cht=lc&chxt=x,y&chxl=0:|8||||||12||||||16||||||20||||||24||||||28|1:|#{min}|#{mid}|#{max}|&chxp=1,2,50,97&chxr=0,18,66&chls=0,0,0|0,0,0|2,1,0|0,0,0&chf=c,ls,0,CCCCCC,0.125,FFFFFF,0.25,CCCCCC,0.25,FFFFFF,0.25,CCCCCC,0.125&chd=t:#{scaled_min.join(",")}|#{scaled_max.join(",")}|#{scaled.join(",")}&chco=3164A6,3164A6,FDB33A&chm=E,111111,0,-1,1:20"
  out.puts row["row_names"] +"@"+time_points.join(",")+"@"+numbers.join(",")+"@"+cubase

end